# You can override these default settings with a local.toml file. 
# You can also load even more overrides from a toml file with the same name as the run_mode.  e.g. dev.toml
#
# DO NOT STORE SECRETS IN THIS FILE!  INSTEAD CREATE YOUR OWN local.toml or run mode toml FILE AND OVERRIDE THESE SETTINGS THERE.
#
# e.g., to override the secrets for oauth clients, create a local.toml file with the following contents:
#
# [oauth_providers]
# google = { client_id = "YOUR GOOGLE CLIENT ID", client_secret = "YOUR GOOGLE CLIENT SECRET" }
# github = { client_id = "xxx", client_secret = "xxx" }
#
# To override a specific setting only for a particular run mode, create a toml file with the same name as the run_mode.  e.g. Create a file called dev.toml if the run_mode is "dev". 
# The run mode config file will always be loaded *last* and override any other settings including any from default.toml or local.toml (other than the run_mode setting itself!)

# To override run_mode you can define the RUN_MODE environment variable instead of changing it here.  
# run_mode is the only value that you can't override using local.toml or any other file.  It has to be either changed here, or defined as an environment variable to override this setting.
run_mode = "dev"

[website]
bind_ssl_config = { enabled = false }
bind_ports = { http = 8080 }
public_ports = { http = 8080 }
web_root = "examples/chatgpt-plugin/public/www"

[website.pages]
protected_home = "/chatgpt-plugin/api/todos"

[oauth_server]
token_url = "https://${website.public_hostname}/auth/token"
refresh_url = "https://${website.public_hostname}/auth/refresh"
authorization_url = "https://${website.public_hostname}/auth/auth"

[oauth_server.clients]
"create_a_client_id_for_chatgpt" = { client_secret = "create_a_secret_for_chatgpt", allowed_redirect_uris = [
] }

[session]

[routes]

[oauth_providers]
google = { display_name = "Google", client_id = "YOUR GOOGLE CLIENT ID", client_secret = "YOUR GOOGLE CLIENT SECRET", auth_uri = "https://accounts.google.com/o/oauth2/auth", token_uri = "https://oauth2.googleapis.com/token", extra = { userinfo_uri = "https://www.googleapis.com/oauth2/v3/userinfo" } }
github = { display_name = "GitHub", client_id = "xxx", client_secret = "xxx", auth_uri = "https://github.com/login/oauth/authorize", token_uri = "https://github.com/login/oauth/access_token", extra = { userinfo_uri = "https://api.github.com/user" } }

[chatgpt_plugin]
plugin_json = "/.well-known/ai-plugin.json"
openapi_yaml = "/chatgpt-plugin/openapi.yaml"

[chatgpt_plugin.plugin_info]
schema_version = "v1"
name_for_human = "Grafton.Ai ChatGPT Plugin API"
name_for_model = "ai_grafton_chatgpt_plugin"
description_for_human = "Query the Grafton.Ai knowledge engine."
description_for_model = "Help the user with asking the Grafton.Ai knowledge engine to answer queries."
logo_url = "https://${website.public_hostname}/images/website_logo_500x500.png"
contact_email = "grant@grafton.ai"
legal_info_url = "https://${website.public_hostname}/legal"

[chatgpt_plugin.plugin_info.api]
type = "openapi"
url = "https://${website.public_hostname}/chatgpt-plugin/openapi.yaml"

[chatgpt_plugin.plugin_info.auth]
type = "none"
client_url = "https://${website.public_hostname}/login"
scope = ""
authorization_url = "https://${website.public_hostname}/auth/google/exchange"
authorization_content_type = "application/json"
verification_tokens = { openai = "Replace_this_string_with_the_verification_token_generated_in_the_ChatGPT_UI" }

[chatgpt_plugin.openapi]
openapi = "3.0.1"

[chatgpt_plugin.openapi.info]
title = "YYY Plugin"
description = "A plugin that allows the user to create and manage a TODO list using ChatGPT."
version = "v1"

[[chatgpt_plugin.openapi.servers]]
url = "https://${website.public_hostname}"
description = "Grafton.Ai ChatGPT Plugin API"

[chatgpt_plugin.openapi.servers.variables]

[chatgpt_plugin.openapi.paths."/chatgpt-plugin/api/todos"]
get.summary = "YYY Get the list of todos"
get.operationId = "getTodos"
get.responses.200.description = "OK"
get.responses.200.content."application/json".schema."$ref" = "#/components/schemas/getTodosResponse"

[chatgpt_plugin.openapi.components.schemas.getTodosResponse]
description = "YYY The list of todos."
type = "array"
minItems = 0
items.description = "TODO Item"
items.type = "string"
